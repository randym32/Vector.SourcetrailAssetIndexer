//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace CoatiSoftware.SourcetrailDB {

public class sourcetraildb {
  public static string getVersionString() {
    string ret = sourcetraildbPINVOKE.getVersionString();
    return ret;
  }

  public static int getSupportedDatabaseVersion() {
    int ret = sourcetraildbPINVOKE.getSupportedDatabaseVersion();
    return ret;
  }

  public static string getLastError() {
    string ret = sourcetraildbPINVOKE.getLastError();
    return ret;
  }

  public static void clearLastError() {
    sourcetraildbPINVOKE.clearLastError();
  }

  public static bool open(string databaseFilePath) {
    bool ret = sourcetraildbPINVOKE.open(databaseFilePath);
    if (sourcetraildbPINVOKE.SWIGPendingException.Pending) throw sourcetraildbPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool close() {
    bool ret = sourcetraildbPINVOKE.close();
    return ret;
  }

  public static bool clear() {
    bool ret = sourcetraildbPINVOKE.clear();
    return ret;
  }

  public static bool isEmpty() {
    bool ret = sourcetraildbPINVOKE.isEmpty();
    return ret;
  }

  public static bool isCompatible() {
    bool ret = sourcetraildbPINVOKE.isCompatible();
    return ret;
  }

  public static int getLoadedDatabaseVersion() {
    int ret = sourcetraildbPINVOKE.getLoadedDatabaseVersion();
    return ret;
  }

  public static bool beginTransaction() {
    bool ret = sourcetraildbPINVOKE.beginTransaction();
    return ret;
  }

  public static bool commitTransaction() {
    bool ret = sourcetraildbPINVOKE.commitTransaction();
    return ret;
  }

  public static bool rollbackTransaction() {
    bool ret = sourcetraildbPINVOKE.rollbackTransaction();
    return ret;
  }

  public static bool optimizeDatabaseMemory() {
    bool ret = sourcetraildbPINVOKE.optimizeDatabaseMemory();
    return ret;
  }

  public static int recordSymbol(string serializedNameHierarchy) {
    int ret = sourcetraildbPINVOKE.recordSymbol(serializedNameHierarchy);
    if (sourcetraildbPINVOKE.SWIGPendingException.Pending) throw sourcetraildbPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool recordSymbolDefinitionKind(int symbolId, DefinitionKind symbolDefinitionKind) {
    bool ret = sourcetraildbPINVOKE.recordSymbolDefinitionKind(symbolId, (int)symbolDefinitionKind);
    return ret;
  }

  public static bool recordSymbolKind(int symbolId, SymbolKind symbolKind) {
    bool ret = sourcetraildbPINVOKE.recordSymbolKind(symbolId, (int)symbolKind);
    return ret;
  }

  public static bool recordSymbolLocation(int symbolId, int fileId, int startLine, int startColumn, int endLine, int endColumn) {
    bool ret = sourcetraildbPINVOKE.recordSymbolLocation(symbolId, fileId, startLine, startColumn, endLine, endColumn);
    return ret;
  }

  public static bool recordSymbolScopeLocation(int symbolId, int fileId, int startLine, int startColumn, int endLine, int endColumn) {
    bool ret = sourcetraildbPINVOKE.recordSymbolScopeLocation(symbolId, fileId, startLine, startColumn, endLine, endColumn);
    return ret;
  }

  public static bool recordSymbolSignatureLocation(int symbolId, int fileId, int startLine, int startColumn, int endLine, int endColumn) {
    bool ret = sourcetraildbPINVOKE.recordSymbolSignatureLocation(symbolId, fileId, startLine, startColumn, endLine, endColumn);
    return ret;
  }

  public static int recordReference(int contextSymbolId, int referencedSymbolId, ReferenceKind referenceKind) {
    int ret = sourcetraildbPINVOKE.recordReference(contextSymbolId, referencedSymbolId, (int)referenceKind);
    return ret;
  }

  public static bool recordReferenceLocation(int referenceId, int fileId, int startLine, int startColumn, int endLine, int endColumn) {
    bool ret = sourcetraildbPINVOKE.recordReferenceLocation(referenceId, fileId, startLine, startColumn, endLine, endColumn);
    return ret;
  }

  public static bool recordReferenceIsAmbiguous(int referenceId) {
    bool ret = sourcetraildbPINVOKE.recordReferenceIsAmbiguous(referenceId);
    return ret;
  }

  public static int recordReferenceToUnsolvedSymhol(int contextSymbolId, ReferenceKind referenceKind, int fileId, int startLine, int startColumn, int endLine, int endColumn) {
    int ret = sourcetraildbPINVOKE.recordReferenceToUnsolvedSymhol(contextSymbolId, (int)referenceKind, fileId, startLine, startColumn, endLine, endColumn);
    return ret;
  }

  public static bool recordQualifierLocation(int referencedSymbolId, int fileId, int startLine, int startColumn, int endLine, int endColumn) {
    bool ret = sourcetraildbPINVOKE.recordQualifierLocation(referencedSymbolId, fileId, startLine, startColumn, endLine, endColumn);
    return ret;
  }

  public static int recordFile(string filePath) {
    int ret = sourcetraildbPINVOKE.recordFile(filePath);
    if (sourcetraildbPINVOKE.SWIGPendingException.Pending) throw sourcetraildbPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool recordFileLanguage(int fileId, string languageIdentifier) {
    bool ret = sourcetraildbPINVOKE.recordFileLanguage(fileId, languageIdentifier);
    if (sourcetraildbPINVOKE.SWIGPendingException.Pending) throw sourcetraildbPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int recordLocalSymbol(string name) {
    int ret = sourcetraildbPINVOKE.recordLocalSymbol(name);
    if (sourcetraildbPINVOKE.SWIGPendingException.Pending) throw sourcetraildbPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool recordLocalSymbolLocation(int localSymbolId, int fileId, int startLine, int startColumn, int endLine, int endColumn) {
    bool ret = sourcetraildbPINVOKE.recordLocalSymbolLocation(localSymbolId, fileId, startLine, startColumn, endLine, endColumn);
    return ret;
  }

  public static bool recordAtomicSourceRange(int fileId, int startLine, int startColumn, int endLine, int endColumn) {
    bool ret = sourcetraildbPINVOKE.recordAtomicSourceRange(fileId, startLine, startColumn, endLine, endColumn);
    return ret;
  }

  public static bool recordError(string message, bool fatal, int fileId, int startLine, int startColumn, int endLine, int endColumn) {
    bool ret = sourcetraildbPINVOKE.recordError(message, fatal, fileId, startLine, startColumn, endLine, endColumn);
    if (sourcetraildbPINVOKE.SWIGPendingException.Pending) throw sourcetraildbPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
